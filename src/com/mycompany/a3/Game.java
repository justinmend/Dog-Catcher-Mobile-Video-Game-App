/*Justin Mendiguarin*/

package com.mycompany.a3;

import java.util.ArrayList;

import com.codename1.charts.util.ColorUtil;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Form;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.util.UITimer;
import com.mycompany.a3.commands.AboutCommand;
import com.mycompany.a3.commands.ContractCommand;
import com.mycompany.a3.commands.ExitCommand;
import com.mycompany.a3.commands.ExpandCommand;
import com.mycompany.a3.commands.FightCommand;
import com.mycompany.a3.commands.HealCommand;
import com.mycompany.a3.commands.HelpCommand;
import com.mycompany.a3.commands.JumpToCatCommand;
import com.mycompany.a3.commands.JumpToDogCommand;
import com.mycompany.a3.commands.KittenCommand;
import com.mycompany.a3.commands.DownCommand;
import com.mycompany.a3.commands.LeftCommand;
import com.mycompany.a3.commands.RightCommand;
import com.mycompany.a3.commands.UpCommand;
import com.mycompany.a3.commands.PauseCommand;
import com.mycompany.a3.commands.ScoopCommand;
import com.mycompany.a3.commands.SoundCommand;
import com.mycompany.a3.commands.TickCommand;

/**
 * This class creates a simple "Form" by extending an existing class "Form",
 * defined in the CN1s ui package.
 */
// The Game class must extend from the build-in Form class.
// (MVC)CONTROLLER

// The Game class is to include a timer (you should use the UITimer build-in CN1
// class)
// to drive the animation (movement of movable objects).
// Game should also implement Runnable (a build-in CN1 interface).

// Each tick generated by the timer should call the run()
// method in Game. run() in turn can then invoke the Tick command from the
// previous
// assignment, causing all movable objects to move. This replaces the Tick
// button, which is no
// longer needed and should be eliminated.
public class Game extends Form implements Runnable {
	private GameWorld gw;
	private MapView mv; // new in A2
	private ScoreView sv; // new in A2
	private boolean pausedBool = false;



	// side menu check box
	private CheckBox checkbox;
	
	// left buttons
	private Button expandButton = new Button();// "Expand"
	private Button netUpButton = new Button();
	private Button netLeftButton = new Button();
	private Button jumpDogButton = new Button();

	// right buttons
	private Button contractButton = new Button();
	private Button netDownButton = new Button();
	private Button netRightButton = new Button();
	private Button jumpCatButton = new Button();
	private Button scoopButton = new Button();

	// command

	ContractCommand myDownSizeNetCommand;
	ExpandCommand myExpandNetCommand;
	FightCommand myFightCommand;
	JumpToCatCommand myJumpToCatCommand;
	JumpToDogCommand myJumpToDogCommand;
	KittenCommand myKittenCommand;
	ScoopCommand myScoopCommand;
	UpCommand myMoveUpCommand;
	DownCommand myMoveDownCommand;
	ExitCommand myExitCommand;
	TickCommand myTickCommand;
	SoundCommand mySoundCommand;
	LeftCommand myMoveLeftCommand;
	RightCommand myMoveRightCommand;
	AboutCommand myAboutCommand;
	HelpCommand myHelpCommand;

	// HealCommand myHealCommand;
	// PauseCommand myPauseCommand;

	ArrayList<ActionListener> cmdCollection = new ArrayList<ActionListener>();

	private UITimer locTimer = new UITimer(this);

	private Button pauseButton = new Button();
	private PauseCommand myPauseCommand = new PauseCommand();

	private Button healButton = new Button();
	HealCommand myHealCommand;

	// Once the game world has been created and initialized, the Game
	// constructor calls play() method to begin the game.
	// play() accepts single-character commands from the player via the text
	// field located on the form (the Game class)
	// as indicated in the â€œAppendix â€“ C1 Notesâ€�.
	public Game() {
		gw = new GameWorld(); // create "Observable" GameWorld
		mv = new MapView(); // create an "Observer" for the map
		sv = new ScoreView(); // create an "Observer" for the game state data
		gw.addObserver(mv); // register the map observer
		gw.addObserver(sv); // register the score observer

		mv.setTargetWorld(gw);
		sv.setTargetWorld(gw);

		createCommandObjects();

		int i = cmdCollection.size() - 1;
		for (; i >= 0; i--) {
			((ICommand) (cmdCollection.get(i))).setTarget(gw);
		}

		myPauseCommand.setTarget(this);

		locTimer.schedule(10, true, this); // 20

		/* BIND COMMANDS TO KEYS */
		this.addKeyListener('e', myExpandNetCommand);
		this.addKeyListener('c', myDownSizeNetCommand);
		this.addKeyListener('s', myScoopCommand);
		this.addKeyListener('r', myMoveRightCommand);
		this.addKeyListener('l', myMoveLeftCommand);
		this.addKeyListener('u', myMoveUpCommand);
		this.addKeyListener('d', myMoveDownCommand);
		this.addKeyListener('o', myJumpToDogCommand);
		this.addKeyListener('a', myJumpToCatCommand);
		// this.addKeyListener('k', myKittenCommand);
		// this.addKeyListener('f', myFightCommand);
		// this.addKeyListener('t', myTickCommand);
		this.addKeyListener('x', myExitCommand);
		// heal
		// this.addKeyListener('h', myHealCommand);

		/* SET TARGET */
		//ScoopCommand.setTarget(gw);
		// JumpToACatCommand.setTarget(gw);
		//MoveRightCommand.setTarget(gw);
		//MoveDownCommand.setTarget(gw);
		// DownSizeNetCommand.setTarget(gw);
		// ExpandNetCommand.setTarget(gw);
		//MoveUpCommand.setTarget(gw);
		//MoveLeftCommand.setTarget(gw);
		// JumpToADogCommand.setTarget(gw);
		// FightCommand.setTarget(gw);
		// KittenCommand.setTarget(gw);
		//TickCommand.setTarget(gw);
		//SoundCommand.setTarget(gw);
		// Heal
		//HealCommand.setTarget(gw);
		// Pause
		// PauseCommand.setTarget(this);
		// PauseCommand.setTarget(gw);

		/* Check box for sound component */
		// CheckBox soundCheckBox = new CheckBox("Sound");
		checkbox = new CheckBox();
		checkbox.getAllStyles().setBgTransparency(255);
		checkbox.getAllStyles().setBgColor(ColorUtil.LTGRAY);
		checkbox.setCommand(mySoundCommand);
		mySoundCommand.putClientProperty("SideComponent", checkbox);
		checkbox.setEnabled(true);// initialize
		checkbox.setSelected(true);

		/* add commands to side menu and title bar area */
		/* Adding Items to Title Bar */
		/* Code for a form with a toolbar */
		Toolbar myToolbar = new Toolbar();
		this.setToolbar(myToolbar);// make sure to use lower-case "b“,
									// setToolBar() is depreciated
		this.setTitle("Dog Catcher Game");
		myToolbar.addCommandToRightBar(myHelpCommand);
		// SIDE MENU ITEMS
		myToolbar.addCommandToSideMenu(myScoopCommand);
		myToolbar.addCommandToSideMenu(mySoundCommand);
		myToolbar.addCommandToSideMenu(myAboutCommand);
		myToolbar.addCommandToSideMenu(myExitCommand);

		/* Code for a form with containers in different layout arrangements */
		this.setLayout(new BorderLayout());

		/* START OF TOP CONTAINER */
		this.add(BorderLayout.NORTH, sv);
		/* END OF TOP CONTAINER */

		/* START OF LEFT CONTAINER */
		Container leftContainer = new Container(new GridLayout(4, 1));
		// Container leftContainer = new Container(new
		// BoxLayout(BoxLayout.X_AXIS));
		leftContainer.getAllStyles().setPadding(Component.TOP, 100);
		leftContainer.getAllStyles().setPadding(Component.BOTTOM, 190);
		leftContainer.getAllStyles().setBorder(Border.createLineBorder(2, ColorUtil.BLACK));
		// Expand Button
		Button bExpand = new Button();
		leftContainer.add(bExpand);
		bExpand.getUnselectedStyle().setBgTransparency(255);
		bExpand.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bExpand.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bExpand.setCommand(myExpandNetCommand);
		// Up Button
		Button bUp = new Button();
		leftContainer.add(bUp);
		bUp.getUnselectedStyle().setBgTransparency(255);
		bUp.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bUp.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bUp.setCommand(myMoveUpCommand);
		// Left Button
		Button bLeft = new Button();
		leftContainer.add(bLeft);
		bLeft.getUnselectedStyle().setBgTransparency(255);
		bLeft.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bLeft.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bLeft.setCommand(myMoveLeftCommand);
		// JumpToADog Button
		Button bJumpToADog = new Button();
		leftContainer.add(bJumpToADog);
		bJumpToADog.getUnselectedStyle().setBgTransparency(255);
		bJumpToADog.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bJumpToADog.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bJumpToADog.setCommand(myJumpToDogCommand);
		this.add(BorderLayout.WEST, leftContainer);
		/* END OF LEFT CONTAINER */

		/* START OF RIGHT CONTAINER */
		Container rightContainer = new Container(new GridLayout(4, 1));
		rightContainer.getAllStyles().setPadding(Component.TOP, 100);
		rightContainer.getAllStyles().setPadding(Component.BOTTOM, 100);
		rightContainer.getAllStyles().setBorder(Border.createLineBorder(2, ColorUtil.BLACK));
		// Contract Button
		Button bContract = new Button();
		rightContainer.add(bContract);
		bContract.getUnselectedStyle().setBgTransparency(255);
		bContract.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bContract.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bContract.setCommand(myDownSizeNetCommand);
		// Down Button
		Button bDown = new Button();
		rightContainer.add(bDown);
		bDown.getUnselectedStyle().setBgTransparency(255);
		bDown.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bDown.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bDown.setCommand(myMoveDownCommand);
		// Right Button
		Button bRight = new Button();
		rightContainer.add(bRight);
		bRight.getUnselectedStyle().setBgTransparency(255);
		bRight.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bRight.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bRight.setCommand(myMoveRightCommand);
		// JumpToACat Button
		Button bJumpToACat = new Button();
		rightContainer.add(bJumpToACat);
		bJumpToACat.getUnselectedStyle().setBgTransparency(255);
		bJumpToACat.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bJumpToACat.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bJumpToACat.setCommand(myJumpToCatCommand);
		// Scoop Button
		Button bScoop = new Button();
		rightContainer.add(bScoop);
		bScoop.getUnselectedStyle().setBgTransparency(255);
		bScoop.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		bScoop.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		bScoop.setCommand(myScoopCommand);
		this.add(BorderLayout.EAST, rightContainer);
		/* END OF RIGHT CONTAINER */

		/* START OF CENTER CONTAINER */
		mv.getAllStyles().setBorder(Border.createLineBorder(3, ColorUtil.BLUE));
		this.add(BorderLayout.CENTER, mv);
		/* END OF CENTER CONTAINER */

		/* START OF BOTTOM CONTAINER */
		Container bottomContainer = new Container(new FlowLayout(Component.CENTER));
		bottomContainer.getAllStyles().setBorder(Border.createLineBorder(2, ColorUtil.BLACK));

		// Heal Button
		// Button bHeal = new Button();
		bottomContainer.add(healButton);
		healButton.getUnselectedStyle().setBgTransparency(255);
		healButton.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		healButton.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		healButton.setCommand(myHealCommand);

		// Pause Button
		// Button bPause = new Button();
		bottomContainer.add(pauseButton);
		pauseButton.getUnselectedStyle().setBgTransparency(255);
		pauseButton.getUnselectedStyle().setBgColor(ColorUtil.BLUE);
		pauseButton.getUnselectedStyle().setFgColor(ColorUtil.WHITE);
		pauseButton.setCommand(myPauseCommand);

		this.add(BorderLayout.SOUTH, bottomContainer);

		healButton.setEnabled(false);
		myHealCommand.setEnabled(false);
		/* END OF BOTTOM CONTAINER */

		this.show();
		gw.setGWSize(mv.getAbsoluteX(), mv.getAbsoluteY(), mv.getWidth(), mv.getHeight(), sv.getY(),
				bottomContainer.getLayoutHeight());
		gw.initLayout(); // calls a GameWorld method initLayout() to set the
		// starting layout of the game,
		gw.notifyObservers();
	}

	// There are some changes in the way the Tick command works for this
	// assignment. In
	// order for the animation to look smooth, the timer itself will have to
	// tick at a fairly fast rate (about
	// every 20 msec or so).
	// @Override
	public void run() {
		gw.tick();
	}

	public boolean isPaused() {
		return pausedBool;
	}

	public void resumeTheGame() {
		if (this.pausedBool != true) {
			return;
		}
		this.pausedBool = false;

		if (checkbox.isSelected()) {
			gw.toggleSound();
		}

		locTimer.schedule(20, true, this);
		mv.setPaused(false);
		mv.unpause();

		resumeGameButtons();
	}
	
	public boolean isSoundChecked(){
		if(checkbox.isSelected()){
			gw.setSound(true);
			return true;
		}
		gw.setSound(false);
		return false;
	}
	
	public void pauseTheGame() {
		if (this.pausedBool != false) {
			return;
		}

		if (checkbox.isSelected()) {
			gw.toggleSound();
		}

		locTimer.cancel();
		pausedBool = true;
		mv.setPaused(true);

		pauseGameButtons();
	}

	public void resumeGameButtons() {

		pauseButton.setText("Pause");

		healButton.setEnabled(false);
		myHealCommand.setEnabled(false);
		removeKeyListener('h', myHealCommand);

		expandButton.setEnabled(true);
		netUpButton.setEnabled(true);
		netLeftButton.setEnabled(true);
		jumpDogButton.setEnabled(true);
		contractButton.setEnabled(true);
		netDownButton.setEnabled(true);
		netRightButton.setEnabled(true);
		jumpCatButton.setEnabled(true);
		scoopButton.setEnabled(true);

		myExpandNetCommand.setEnabled(true);
		myMoveUpCommand.setEnabled(true);
		myMoveLeftCommand.setEnabled(true);
		myJumpToDogCommand.setEnabled(true);
		myDownSizeNetCommand.setEnabled(true);
		myMoveDownCommand.setEnabled(true);
		myMoveRightCommand.setEnabled(true);
		myJumpToCatCommand.setEnabled(true);
		myScoopCommand.setEnabled(true);

		addKeyListener('e', myExpandNetCommand);
		addKeyListener('c', myDownSizeNetCommand);
		addKeyListener('s', myScoopCommand);
		addKeyListener('r', myMoveRightCommand);
		addKeyListener('l', myMoveLeftCommand);
		addKeyListener('u', myMoveUpCommand);
		addKeyListener('d', myMoveDownCommand);
		addKeyListener('o', myJumpToDogCommand);
		addKeyListener('a', myJumpToCatCommand);

	}

	public void pauseGameButtons() {

		healButton.setEnabled(true);
		myHealCommand.setEnabled(true);
		addKeyListener('h', myHealCommand);

		pauseButton.setText("Play");

		expandButton.setEnabled(false);
		netUpButton.setEnabled(false);
		netLeftButton.setEnabled(false);
		jumpDogButton.setEnabled(false);
		contractButton.setEnabled(false);
		netDownButton.setEnabled(false);
		netRightButton.setEnabled(false);
		jumpCatButton.setEnabled(false);
		scoopButton.setEnabled(false);

		myExpandNetCommand.setEnabled(false);
		myMoveUpCommand.setEnabled(false);
		myMoveLeftCommand.setEnabled(false);
		myJumpToDogCommand.setEnabled(false);
		myDownSizeNetCommand.setEnabled(false);
		myMoveDownCommand.setEnabled(false);
		myMoveRightCommand.setEnabled(false);
		myJumpToCatCommand.setEnabled(false);
		myScoopCommand.setEnabled(false);

		removeKeyListener('e', myExpandNetCommand);
		removeKeyListener('c', myDownSizeNetCommand);
		removeKeyListener('s', myScoopCommand);
		removeKeyListener('r', myMoveRightCommand);
		removeKeyListener('l', myMoveLeftCommand);
		removeKeyListener('u', myMoveUpCommand);
		removeKeyListener('d', myMoveDownCommand);
		removeKeyListener('o', myJumpToDogCommand);
		removeKeyListener('a', myJumpToCatCommand);

	}

	/** Create Command Objects and add to command collection */
	private void createCommandObjects() {
		myHealCommand = HealCommand.getInstance();
		cmdCollection.add(myHealCommand);

		myPauseCommand = PauseCommand.getInstance();

		myDownSizeNetCommand = ContractCommand.getInstance();
		cmdCollection.add(myDownSizeNetCommand);

		myExpandNetCommand = ExpandCommand.getInstance();
		cmdCollection.add(myExpandNetCommand);

		myFightCommand = FightCommand.getInstance();
		cmdCollection.add(myFightCommand);

		myJumpToCatCommand = JumpToCatCommand.getInstance();
		cmdCollection.add(myJumpToCatCommand);

		myJumpToDogCommand = JumpToDogCommand.getInstance();
		cmdCollection.add(myJumpToDogCommand);

		myKittenCommand = KittenCommand.getInstance();
		cmdCollection.add(myKittenCommand);

		myScoopCommand = ScoopCommand.getInstance();
		cmdCollection.add(myScoopCommand);

		myMoveUpCommand = UpCommand.getInstance();
		cmdCollection.add(myMoveUpCommand);

		myMoveDownCommand = DownCommand.getInstance();
		cmdCollection.add(myMoveDownCommand);

		myMoveRightCommand = RightCommand.getInstance();
		cmdCollection.add(myMoveRightCommand);

		myMoveLeftCommand = LeftCommand.getInstance();
		cmdCollection.add(myMoveLeftCommand);

		myTickCommand = TickCommand.getInstance();
		cmdCollection.add(myTickCommand);

		mySoundCommand = SoundCommand.getInstance();
		cmdCollection.add(mySoundCommand);

		myExitCommand = ExitCommand.getInstance();
		cmdCollection.add(myExitCommand);

		myAboutCommand = AboutCommand.getInstance();
		cmdCollection.add(myAboutCommand);

		myHelpCommand = HelpCommand.getInstance();
		cmdCollection.add(myHelpCommand);
	}

}
